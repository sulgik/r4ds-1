# 워크플로: 기초 {#sec-workflow-basics}

```{r}
#| results: "asis"
#| echo: false

source("_common.R")
status("complete")
```

앞서 R 코드를 실행해보았다.
세부사항을 충분히 다루지 않았지만, 여러분들은 분명히 기초적인 것들을 알게 되었을 것이다.
그렇지 않았다면 좌절해서 이 책을 던져 버렸을 것이다!
R 로 프로그래밍을 시작할 때 잘 안되어 힘든 것은 자연스러운 일인데, R 은 구두점에 엄격하고, 문자 하나라도 제자리를 벗어나면 바로 말을 듣지 않는다.
힘이 조금 들겠지만 이는 일상적이고 잠깐이기 때문에 걱정하지 않아도 된다.
모든 사람에게 일어나는 일이며 계속 노력하면 극복할 수 있다.

진도를 나아가기 전에 R 코딩 기초가 탄탄한지, RStudio 의 편리한 기능들을 알고 있는지 확인해보자.

## 코딩 기초

플롯을 빨리 만드느라 빼먹었던 몇 가지 기본사항을 살펴보자.
R 을 계산기로 사용할 수 있다.

```{r}
1 / 200 * 30
(59 + 73 + 2) / 3
sin(pi / 2)
```

`<-` 를 사용하여 새로운 객체를 생성할 수 있다:

```{r}
x <- 3 * 4
```

`c()` 를 이용하여 다중 요소를 하나의 벡터로 조합(**c**ombine)할 수 있다:

```{r}
primes <- c(1, 2, 3, 5, 7, 11, 13)
```

기초 산수는 벡터의 모든 요소에 적용된다:

```{r}
primes * 2
primes - 1
```

객체를 생성하는 모든 R 명령어, 즉 **할당(assignment)**문은 다음의 동일한 형식을 갖는다.

```{r eval = FALSE}
object_name <- value
```

이 코드를 읽을 때, "객체 이름이 값을 갖는다" 라고 마음 속으로 읽어보자.

앞으로 많은 할당문을 만들게 되어 `<-` 를 타이핑하는 게 고통스러울 것이다.
귀찮다고 `=` 를 사용하지 말라.
작동은 하겠지만 나중에 혼란스럽게 될 것이다.
대신 RStudio 단축키인, Alt + - (빼기 기호)를 사용하라.
RStudio 는 자동으로 `<-` 주위를 공백으로 둘러싼다.
이는 좋은 코드 포매팅 습관이다.
이렇게 좋은 날에 코드를 읽는다는 것은 고생스러운일이므로두눈을위해서라도 공백을 사용하라.

## 주석

R 에서는 해당 라인에서 `#` 이후의 모든 텍스트를 무시합니다.
이 기능을 이용하면, **주석** 을 작성할 수 있는데, 주석은 R 은 무시하지만, 다른 사람이 읽는 텍스트입니다.
코드가 무슨일을 하는지 설명하기 위해, 예제에서 주석을 포함하기도 합니다.

다음 코드가 무엇을 하는지 간단히 설명하는 데 주석이 유용할 수 있습니다.

```{r}
# create vector of primes
primes <- c(2, 3, 5, 7, 11, 13)

# multiply primes by 2
primes * 2
```

이와 같이 짧은 코드에서, 매 라인마다 주석을 남길 필요는 없을 것이다.
하지만 복잡한 코드에서 주석을 사용하면, 이 코드에서 무엇을 했는지 알아보기 위해 당신의 (그리고 동료들의) 시간을 많이 절약할 수 있다.

주석으로 코드의 *어떻게(how)* 와 *무엇(what)* 이 아니라, *왜(why)* 를 설명하라.
코드를 잘 읽으면, 귀찮긴 하지만, *무엇* 과 *어떻게* 를 알아내는 것은 항상 가능하다.
주석에서 매 단계를 설명하고, 코드를 수정했다면, 그 주석을 업데이트하는 것도 까먹지 말아야 한다.
그렇지 않으면, 나중에 코드를 볼 때 헷갈릴 것이다.

어떤 것이 *왜* 수행되었는지 알아내는 것은 불가능하진 않지만, 훨씬 더 어렵다.
예를 들어, `geom_smooth()` 에는 `span` 이라는 인수가 있는데, 이는 평탄도를 제어하고, 큰 값은 더 평탄한 곡선을 만든다.
이 `span` 의 값을 기본값인 0.75 에서 0.9 로 변경하기로 결정했다면, *무엇*이 일어났는지 미래의 독자가 이해하는 것은 쉽지만, 주석으로 생각했던 바를 적어놓지 않으면, *왜* 기본값에서 변경했는지 이해하는 사람은 아무도 없을 것이다.

데이터분석 코드에서 주석을 이용하여 전체 공략계획을 설명하고, 중요한 인사이트를 발견했을 때 이를 기록하라.
코드 자체에서 이 지식을 다시 획득할 수 있는 방법은 없다.

## 이름짓기 {#sec-whats-in-a-name}

객체 이름은 문자로 시작해야만 하고 문자, 숫자, `_`, `.` 만 포함해야 한다.
객체 이름이 설명력이 있으면 좋으므로 여러 단어를 이어쓸 때의 규칙(convention)이 필요하다.
소문자 단어들을 `_` 으로 구분하는 **snake_case** 를 추천한다.

```{r}
#| eval: false

i_use_snake_case
otherPeopleUseCamelCase
some.people.use.periods
And_aFew.People_RENOUNCEconvention
```

@sec-workflow-style 장 코드스타일을 볼 때, 이름에 대해 다시 살펴볼 것이다.

객체를 확인하려면 이름을 타이핑하면 된다.

```{r}
x
```

할당을 또 해보자.

```{r}
this_is_a_really_long_name <- 2.5
```

이 객체를 확인하기 위해 RStudio 완성 기능을 사용해보라.
"this" 를 타이핑하고 탭을 누르고 접두어가 고유하게 될 때까지 문자들을 추가한 후 엔터키를 눌러라.

이런, 실수를 저질렀다!
`this_is_a_really_long_name` 의 값은 2.5 가 아닌 3.5 이어야 했다.
정정하게 도와주는 다른 단축어를 사용하라.
"this" 를 타이핑한 후 Cmd/Ctrl + ↑ 를 누르면, 타이핑했던 명령어 중 그 문자로 시작하는 것들을 모두 보여준다.
화살표 키를 사용하여 움직인 후 엔터를 눌러 해당 명령어를 다시 타이핑하라.
2.5 를 3.5 로 변경하고 다시 실행하라.

또 다른 할당문을 만들어보자.

```{r}
r_rocks <- 2^3
```

이를 확인해 보자.

```{r}
#| eval: false

r_rock
#> Error: object 'r_rock' not found
R_rocks
#> Error: object 'R_rocks' not found
```

여러분과 R 사이에 암묵적인 계약이 있다.
즉, R 은 지루한 계산을 해주겠지만, 대신 여러분은 완전하고 정확하게 지시를 해야 한다.
그렇게 하지 않으면, 찾고자 하는 객체를 찾을 수 없다고 말하는 에러메시지를 보게 될 것이다.
오자는 중요하다.
R 은 "아, `r_rock` 이라고 입력했지만, `r_rocks` 를 의미한다" 라고 사람마음을 읽을 수 없다.
대소문자를 구별한다.
똑같이, R 은 "아, `R_rocks` 이라고 입력했지만, `r_rocks` 를 의미한다" 라고 사람마음을 읽을 수 없다.

## 함수 호출하기

R 에는 다음과 같이 호출되는 내장함수가 많이 있다.

```{r}
#| eval: false

function_name(argument1 = value1, argument2 = value2, ...)
```

숫자 시퀀스(**seq**uence)를 만드는 `seq()` 를 이용해보고, 동시에 RStudio의 유용한 기능에 대해 더 배워보자.
`se` 를 타이핑하고 탭을 쳐보자.
가능한 완성문을 보여주는 팝업이 나타난다.
헷갈리지 않게 하기 위해 추가로 (즉, `q` 를) 타이핑하거나 ↑/↓ 화살표 키로 선택하여 `seq()` 를 지정하라.
팝업되는 툴팁은 해당 함수의 인수와 목적을 알려준다.
도움이 더 필요하면 F1 키를 눌러서 하단 오른쪽 창의 헬프 탭에 있는 세부내용을 모두 참고하라.

원하는 함수를 선택했을 때 탭을 한 번 더 눌러라.
RStudio 는 여는 괄호(`(`)와 닫는 괄호(`)`) 한 쌍을 추가한다.
첫번째 인수의 이름, `from` 을 타이핑하고 `1` 로 설정하라.
그리고 나서 두번째 인수의 이름, `to` 를 타이핑하고 `10` 으로 설정하라.
마지막으로 리턴키를 쳐보자.

```{r}
seq(from = 1, to = 10)
```

함수 호출에서 첫번째 인수들 이름 몇 개를 생략하곤 하는데, 다음과 같이 다시 쓸 수 있다.

```{r}
seq(1, 10)
```

따옴표 한 쌍을 사용할 때도, RStudio 는 유사한 도움을 제공합니다.
다음을 타이핑해 보자.

```{r}
x <- "hello world"
```

따옴표와 괄호는 항상 짝을 이루어야 한다.
RStudio는 최선을 다해 도움을 주지만, 엉망이 되어 짝이 맞지 않는 결과를 낳을 가능성도 있다.
이렇게 되면 R은 연속 문자 "+" 를 표시한다.

```         
> x <- "hello
+
```

`+` 는 R이 입력을 더 기다리고 있음을 표시한다.
즉, 여러분이 완료하지 않았다고 생각한다.
보통 여러분이 `"` 혹은 `)` 를 잊은 경우이다. 누락된 쌍을 추가하거나, ESC 키를 누르고 나가서 다시 해보자.

상단 오른쪽 창의 Environment(환경)에 생성된 객체들이 모두 표시된다.

```{r}
#| echo: false
#| fig-alt: >
#|   Environment tab of RStudio which shows r_rocks, this_is_a_really_long_name, 
#|   x, and y in the Global Environment.

knitr::include_graphics("screenshots/rstudio-env.png")
```

## Exercises

1.  다음의 코드는 왜 작동하지 않는가?

    ```{r}
    #| error: true

    my_variable <- 10
    my_varıable
    ```

    주의 깊게 살펴보라!
    (연습문제가 의미가 없는 것처럼 보이지만, 아주 작은 차이도 알아채도록 두뇌를 훈련하면 프로그래밍할 때 큰 도움이 된다.)

2.  다음 각 R 명령어를 올바르게 실행되도록 조정하라.

    ```{r}
    #| eval: false

    libary(todyverse)

    ggplot(dTA = mpg) + 
      geom_point(maping = aes(x = displ y = hwy)) +
      geom_smooth(method = "lm)
    ```

3.  Option + Shift + K / Alt + Shift + K 를 눌러라.
    어떻게 되는가?
    메뉴를 사용하여 어떻게 같은 곳으로 갈 수 있는가?

4.  @sec-ggsave 의 연습문제를 다시 보자.
    다음의 코드를 실행하라.
    `mpg-plot.png` 에 저장되는 것은 두 플롯 중 어느 것인가?
    이유는?

    ```{r}
    #| eval: false

    my_bar_plot <- ggplot(mpg, aes(x = class)) +
      geom_bar()
    my_scatter_plot <- ggplot(mpg, aes(x = cty, y = hwy)) +
      geom_point()
    ggsave(filename = "mpg-plot.png", plot = my_bar_plot)
    ```

## 요약

R 코드가 작동하는 법과 나중에 당신의 코드를 볼 때 이해하는 데 도움을 주는 팁들을 배웠다.
다음 장에서는, tidyverse 패키지 dplyr 을 배우는 것으로 데이터과학 여정을 계속할 것이다.
이 패키지는 중요한 변수들을 선택하고, 필터링하여 관심있는 행을 골라내고, 요약통계량들을 계산하는 등 데이터를 변환하는데 도움을 준다.
